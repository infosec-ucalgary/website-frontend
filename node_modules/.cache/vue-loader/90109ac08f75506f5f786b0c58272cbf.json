{"remainingRequest":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/vue-functional-calendar/src/components/FunctionalCalendar.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/vue-functional-calendar/src/components/FunctionalCalendar.vue","mtime":499162500000},{"path":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joshua/Dev/Web/VueTestWeb/infosec-uofc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi52ZmMtc3R5bGVzLWNvbmRpdGlvbmFsLWNsYXNzIHsKICAgIEBpbXBvcnQgIi4uL2Fzc2V0cy9zY3NzL2NhbGVuZGFyLnNjc3MiOwp9Cg=="},{"version":3,"sources":["FunctionalCalendar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAm9BA;AACA;AACA","file":"FunctionalCalendar.vue","sourceRoot":"node_modules/vue-functional-calendar/src/components","sourcesContent":["<template>\r\n    <div :class=\"{'vfc-styles-conditional-class': fConfigs.applyStylesheet}\">\r\n        <div class=\"vfc-multiple-input\" :class=\"{'vfc-dark': fConfigs.isDark}\"\r\n             v-if=\"fConfigs.isModal && fConfigs.isDateRange\">\r\n            <input type=\"text\" title=\"Start Date\"\r\n                   v-model=\"input.dateRange.start.date\"\r\n                   :placeholder=\"fConfigs.placeholder\"\r\n                   :readonly=\"!fConfigs.isTypeable\"\r\n                   :maxlength=\"fConfigs.dateFormat.length\"\r\n                   @click=\"showCalendar = !showCalendar\">\r\n            <input type=\"text\" title=\"End Date\"\r\n                   v-model=\"input.dateRange.end.date\"\r\n                   :placeholder=\"fConfigs.placeholder\"\r\n                   :readonly=\"!fConfigs.isTypeable\"\r\n                   :maxlength=\"fConfigs.dateFormat.length\"\r\n                   @click=\"showCalendar = !showCalendar\">\r\n        </div>\r\n        <div :class=\"{'vfc-dark': fConfigs.isDark}\" v-else-if=\"fConfigs.isModal && fConfigs.isDatePicker\">\r\n            <input class=\"vfc-single-input\" type=\"text\" title=\"Date\"\r\n                   v-model=\"input.selectedDate\"\r\n                   :placeholder=\"fConfigs.placeholder\"\r\n                   :readonly=\"!fConfigs.isTypeable\"\r\n                   :maxlength=\"fConfigs.dateFormat.length\"\r\n                   @click=\"showCalendar = !showCalendar\">\r\n        </div>\r\n\r\n        <div class=\"vfc-main-container\" v-show=\"showCalendar\"\r\n             ref=\"mainContainer\"\r\n             :class=\"{'vfc-modal': fConfigs.isModal && (fConfigs.isDatePicker || fConfigs.isDateRange), 'vfc-dark': fConfigs.isDark}\">\r\n            <time-picker v-if=\"showTimePicker\"></time-picker>\r\n            <template v-else>\r\n                <div class=\"vfc-calendars-container\">\r\n                    <div class=\"vfc-navigation-buttons\" ref=\"navigationButtons\"\r\n                         v-if=\"checkHiddenElement('navigationArrows') && !fConfigs.isSeparately\">\r\n                        <div @click=\"PreMonth()\" :class=\"{'vfc-cursor-pointer': allowPreDate}\">\r\n                            <div class=\"vfc-arrow-left\" :class=\"{'vfc-disabled': !allowPreDate}\"></div>\r\n                        </div>\r\n                        <div @click=\"NextMonth()\" :class=\"{'vfc-cursor-pointer': allowNextDate}\">\r\n                            <div class=\"vfc-arrow-right\" :class=\"{'vfc-disabled': !allowNextDate}\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"vfc-calendars\" :key=\"calendarsKey\" ref=\"calendars\">\r\n                        <div class=\"vfc-calendar\" v-for=\"(calendarItem, key) in listCalendars\" :key=\"calendarItem.key\">\r\n                            <month-year-picker ref=\"monthContainer\"\r\n                                               v-show=\"showMonthPicker === key+1 || showYearPicker === key+1\"\r\n                                               :calendar-key=\"key\">\r\n                            </month-year-picker>\r\n                            <div class=\"vfc-content\">\r\n                                <div class=\"vfc-separately-navigation-buttons\" v-if=\"fConfigs.isSeparately\">\r\n                                    <div @click=\"PreMonth(key)\" :class=\"{'vfc-cursor-pointer': allowPreDate}\">\r\n                                        <div class=\"vfc-arrow-left\" :class=\"{'vfc-disabled': !allowPreDate}\"></div>\r\n                                    </div>\r\n                                    <div @click=\"NextMonth(key)\" :class=\"{'vfc-cursor-pointer': allowNextDate}\">\r\n                                        <div class=\"vfc-arrow-right\" :class=\"{'vfc-disabled': !allowNextDate}\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <h2 class=\"vfc-top-date\"\r\n                                    v-if=\"checkHiddenElement('month')\">\r\n                                    <a href=\"#\" @click.prevent=\"openMonthPicker(key+1)\"\r\n                                       :class=\"{'vfc-cursor-pointer vfc-underline':fConfigs.changeMonthFunction, 'vfc-underline-active':showMonthPicker === key+1}\">\r\n                                        {{ calendarItem.month }}</a>\r\n                                    <a href=\"#\" @click.prevent=\"openYearPicker(key+1)\"\r\n                                       :class=\"{'vfc-cursor-pointer vfc-underline':fConfigs.changeYearFunction,  'vfc-underline-active':showYearPicker === key+1}\">\r\n                                        {{ calendarItem.year }}\r\n                                    </a>\r\n                                </h2>\r\n                                <section class=\"vfc-dayNames\">\r\n                                    <span v-for=\"(dayName, key) in fConfigs.dayNames\" :key=\"key\">\r\n                                        <template v-if=\"fConfigs.showWeekNumbers\">\r\n                                            {{ ++key }}.\r\n                                        </template>\r\n                                        <template v-if=\"checkHiddenElement('dayNames')\">\r\n                                            {{ dayName }}\r\n                                        </template>\r\n                                    </span>\r\n                                </section>\r\n                                <transition-group\r\n                                        tag='div'\r\n                                        :name='getTransition_()' appear>\r\n                                    <div class=\"vfc-week\" v-for=\"(week, week_key) in calendarItem.weeks\"\r\n                                         :key=\"week_key+0\">\r\n                                        <div class=\"vfc-day\" ref=\"day\" v-for=\"(day, day_key) in week.days\"\r\n                                             :key=\"day_key\">\r\n                                            <div v-if=\"(day.isDateRangeStart || day.isMouseToLeft) && !day.hideLeftAndRightDays\"\r\n                                                 class=\"vfc-base-start\"></div>\r\n                                            <div v-else-if=\"(day.isDateRangeEnd || day.isMouseToRight) && !day.hideLeftAndRightDays\"\r\n                                                 class=\"vfc-base-end\"></div>\r\n                                            <span v-if=\"!day.hideLeftAndRightDays\"\r\n                                                  data-date=\"\" :key=\"day_key\"\r\n                                                  class=\"vfc-span-day\"\r\n                                                  :class=\"getClassNames(day)\"\r\n                                                  @click=\"clickDay(day)\"\r\n                                                  @mouseover=\"dayMouseOver(week_key, day.date)\">\r\n                                                <slot :week=\"week\" :day=\"day\">\r\n                                                    {{ day.day }}\r\n                                                </slot>\r\n                                        </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </transition-group>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </template>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import helpCalendar from '../assets/js/calendar'\r\n    import {propsAndData} from \"../mixins/propsAndData\";\r\n    import TimePicker from \"./TimePicker\";\r\n    import MonthYearPicker from \"./MonthYearPicker\";\r\n\r\n    export default {\r\n        name: \"FunctionalCalendar\",\r\n        components: {MonthYearPicker, TimePicker},\r\n        mixins: [propsAndData],\r\n        created() {\r\n            this.setConfigs();\r\n            this.initCalendar();\r\n\r\n            if (this.fConfigs.isModal && !this.fConfigs.withTimePicker) {\r\n                // Event\r\n                window.addEventListener('click', (e) => {\r\n                    if (!this.$el.contains(e.target)) {\r\n                        this.showCalendar = false\r\n                    }\r\n                });\r\n            }\r\n\r\n\r\n            window.addEventListener('click', (e) => {\r\n                if (this.showMonthPicker || this.showYearPicker) {\r\n                    let key = this.showMonthPicker ? this.showMonthPicker - 1 : this.showYearPicker - 1;\r\n\r\n                    let element1 = this.$refs.calendars.querySelector(`.vfc-calendars .vfc-calendar:nth-child(${key + 1}) .vfc-top-date a:nth-child(1)`);\r\n                    let element2 = this.$refs.calendars.querySelector(`.vfc-calendars .vfc-calendar:nth-child(${key + 1}) .vfc-top-date a:nth-child(2)`);\r\n\r\n                    if (!this.$refs.monthContainer[key].$el.contains(e.target) && !element1.contains(e.target) && !element2.contains(e.target)) {\r\n                        this.showMonthPicker = this.showYearPicker = false\r\n                    }\r\n                }\r\n            });\r\n\r\n        },\r\n        mounted() {\r\n            // Reacts to external selected dates\r\n            this.$watch('value', function (value) {\r\n                if (this.fConfigs.isDateRange) {\r\n                    this.calendar.dateRange.start.date = value.dateRange.start.date || false;\r\n                    this.calendar.dateRange.end.date = value.dateRange.end.date || false\r\n                } else {\r\n                    this.calendar.selectedDate = value.selectedDate || false\r\n                }\r\n            }, {deep: true});\r\n\r\n            this.$watch('showCalendar', function (value) {\r\n                if (value)\r\n                    this.$emit('opened');\r\n                else\r\n                    this.$emit('closed');\r\n            }, {immediate: true, deep: true});\r\n\r\n            this.setCalendarStyles();\r\n        },\r\n        computed: {\r\n            yearList() {\r\n                let years = [];\r\n                let year = this.calendar.currentDate.getFullYear() - 4;\r\n                for (let i = 0; i < 12; i++) {\r\n                    let finalYear = year + i;\r\n\r\n                    years.push({\r\n                        year: finalYear\r\n                    });\r\n                }\r\n                return years;\r\n            }\r\n        },\r\n        watch: {\r\n            'calendar.selectedDate': {\r\n                handler(val) {\r\n                    this.input.selectedDate = val || '';\r\n                    this.markChooseDays();\r\n                }\r\n            },\r\n            'calendar.currentDate': {\r\n                handler(value) {\r\n                    this.$emit('input', this.calendar);\r\n                    this.checkLimits(value);\r\n                }\r\n            },\r\n            'calendar.dateRange.start.date': {\r\n                handler(val) {\r\n                    this.input.dateRange.start.date = val || '';\r\n                    this.markChooseDays();\r\n                }\r\n            },\r\n            'calendar.dateRange.end.date': {\r\n                handler(val) {\r\n                    this.input.dateRange.end.date = val || '';\r\n                    this.markChooseDays();\r\n                }\r\n            },\r\n            'input.selectedDate': {\r\n                handler(val) {\r\n                    this.input.selectedDate = val = helpCalendar.mask(val);\r\n                    if (helpCalendar.getDateFromFormat(val).getMonth()) {\r\n                        this.calendar.selectedDate = val;\r\n                        this.markChooseDays();\r\n                    }\r\n\r\n                    // Typeable\r\n                    if (helpCalendar.checkValidDate(val) && this.fConfigs.isTypeable) {\r\n                        this.ChooseDate(val);\r\n                    }\r\n                }\r\n            },\r\n            'input.dateRange.start.date': {\r\n                handler(val) {\r\n                    this.input.dateRange.start.date = val = helpCalendar.mask(val);\r\n                    if (helpCalendar.getDateFromFormat(val).getMonth()) {\r\n                        this.calendar.dateRange.start.date = val;\r\n                        this.markChooseDays();\r\n                    }\r\n\r\n                    // Typeable\r\n                    if (helpCalendar.checkValidDate(val) && this.fConfigs.isTypeable) {\r\n                        this.ChooseDate(val);\r\n                    }\r\n                }\r\n            },\r\n            'input.dateRange.end.date': {\r\n                handler(val) {\r\n                    this.input.dateRange.end.date = val = helpCalendar.mask(val);\r\n                    if (helpCalendar.getDateFromFormat(val).getMonth()) {\r\n                        this.calendar.dateRange.end.date = val;\r\n                        this.markChooseDays();\r\n                    }\r\n\r\n                    // Typeable\r\n                    if (helpCalendar.checkValidDate(val) && this.fConfigs.isTypeable) {\r\n                        this.ChooseDate(val);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        ready: function () {\r\n            window.addEventListener('resize', this.setCalendarStyles)\r\n        },\r\n        beforeDestroy: function () {\r\n            window.removeEventListener('resize', this.setCalendarStyles)\r\n        },\r\n        methods: {\r\n            initCalendar() {\r\n                // Set Help Calendar Configs\r\n                helpCalendar.configs.sundayStart = this.fConfigs.sundayStart;\r\n                helpCalendar.configs.leftAndRightDays = this.checkHiddenElement('leftAndRightDays');\r\n                helpCalendar.configs.dateFormat = this.fConfigs.dateFormat;\r\n                helpCalendar.configs.dayNames = this.fConfigs.dayNames;\r\n                helpCalendar.configs.monthNames = this.fConfigs.monthNames;\r\n\r\n                this.setCalendarData();\r\n                this.listRendering();\r\n                this.markChooseDays();\r\n                this.checkLimits(this.calendar.currentDate);\r\n            },\r\n            updateCalendar() {\r\n                this.setExistingCalendarData();\r\n                this.listRendering();\r\n                this.markChooseDays();\r\n            },\r\n            setCalendarData() {\r\n                let date = this.calendar.currentDate;\r\n                date = new Date(date.getFullYear(), date.getMonth() - 1);\r\n\r\n                this.listCalendars = [];\r\n\r\n                for (let i = 0; i < this.fConfigs.calendarsCount; i++) {\r\n                    date = new Date(date.getFullYear(), date.getMonth() + 1);\r\n\r\n                    let calendar = {\r\n                        key: i,\r\n                        date: date,\r\n                        dateTop: `${this.fConfigs.monthNames[date.getMonth()]} ${date.getFullYear()}`,\r\n                        month: this.fConfigs.monthNames[date.getMonth()],\r\n                        year: date.getFullYear(),\r\n                        weeks: helpCalendar.getFinalizedWeeks(date.getMonth(), date.getFullYear())\r\n                    };\r\n\r\n                    this.listCalendars.push(calendar);\r\n\r\n                    if (!this.fConfigs.isMultiple) {\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            setExistingCalendarData() {\r\n                for (let i = 0; i < this.listCalendars.length; i++) {\r\n                    let calendar = this.listCalendars[i];\r\n                    let date = calendar.date;\r\n\r\n                    this.$set(this.listCalendars, i, {\r\n                        key: calendar.key,\r\n                        date: date,\r\n                        dateTop: `${this.fConfigs.monthNames[date.getMonth()]} ${date.getFullYear()}`,\r\n                        month: this.fConfigs.monthNames[date.getMonth()],\r\n                        year: date.getFullYear(),\r\n                        weeks: helpCalendar.getFinalizedWeeks(date.getMonth(), date.getFullYear())\r\n                    });\r\n\r\n                    if (!this.fConfigs.isMultiple) {\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            setConfigs() {\r\n                let vm = this;\r\n                let globalOptions;\r\n                if (typeof vm.$getOptions !== \"undefined\") {\r\n                    // Global Options\r\n                    globalOptions = vm.$getOptions();\r\n                    Object.keys(globalOptions).map(function (objectKey) {\r\n                        if (typeof (vm.fConfigs[objectKey]) !== \"undefined\") {\r\n                            vm.$set(vm.fConfigs, objectKey, globalOptions[objectKey]);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (typeof (vm.configs) !== \"undefined\") {\r\n                    Object.keys(vm.fConfigs).map(function (objectKey) {\r\n                        if (typeof (vm.configs[objectKey]) !== \"undefined\") {\r\n                            // Get From Configs\r\n                            vm.$set(vm.fConfigs, objectKey, vm.configs[objectKey]);\r\n                        }\r\n                    });\r\n                } else {\r\n                    Object.keys(vm.$props).map(function (objectKey) {\r\n                        if (typeof (vm.fConfigs[objectKey]) !== \"undefined\" &&\r\n                            typeof (vm.$props[objectKey]) !== \"undefined\") {\r\n                            vm.$set(vm.fConfigs, objectKey, vm.$props[objectKey]);\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n                // Is Modal\r\n                if (vm.fConfigs.isModal) vm.showCalendar = false;\r\n\r\n                // Placeholder\r\n                if (!vm.fConfigs.placeholder) vm.fConfigs.placeholder = vm.fConfigs.dateFormat;\r\n\r\n                if (typeof vm.newCurrentDate !== \"undefined\") {\r\n                    vm.calendar.currentDate = vm.newCurrentDate;\r\n                }\r\n\r\n                // Sunday Start\r\n                if (vm.fConfigs.sundayStart) {\r\n                    let dayNames = vm.fConfigs.dayNames;\r\n                    let sundayName = dayNames[dayNames.length - 1];\r\n                    dayNames.splice(dayNames.length - 1, 1);\r\n                    dayNames.unshift(sundayName);\r\n                }\r\n            },\r\n            listRendering() {\r\n                let vm = this;\r\n\r\n                // Each Calendars\r\n                vm.listCalendars.forEach(function (calendar) {\r\n                    // Set Calendar Weeks\r\n                    calendar.weeks.forEach(function (week) {\r\n\r\n                        let finalizedDays = [];\r\n\r\n                        week.days.forEach(function (day) {\r\n                            let date = new Date(day.year, day.month, day.day);\r\n                            let now = new Date();\r\n\r\n                            let isToday = false;\r\n\r\n                            date.setHours(0, 0, 0, 0);\r\n                            now.setHours(0, 0, 0, 0);\r\n\r\n                            if (date.getTime() === now.getTime()) {\r\n                                isToday = true;\r\n                            }\r\n\r\n                            let checkMarked;\r\n                            // With Custom Classes\r\n                            if (typeof vm.fConfigs.markedDates[0] === \"object\") {\r\n                                checkMarked = vm.fConfigs.markedDates.find(function (markDate) {\r\n                                    return markDate.date === helpCalendar.formatDate(date)\r\n                                });\r\n                            } else {\r\n                                // Without Classes\r\n                                checkMarked = vm.fConfigs.markedDates.find(function (markDate) {\r\n                                    return markDate === helpCalendar.formatDate(date)\r\n                                });\r\n                            }\r\n\r\n                            if (vm.calendar.dateRange.start.date === helpCalendar.formatDate(date)) {\r\n                                checkMarked = true;\r\n                            }\r\n\r\n                            let isMarked = false;\r\n                            if (typeof checkMarked !== \"undefined\") {\r\n                                isMarked = true;\r\n                            }\r\n\r\n                            finalizedDays.push({\r\n                                day: day.day,\r\n                                date: helpCalendar.formatDate(date),\r\n                                hide: day.hide,\r\n                                isMouseToLeft: false,\r\n                                isMouseToRight: false,\r\n                                isHovered: false,\r\n                                isDateRangeStart: vm.checkDateRangeStart(helpCalendar.formatDate(date)),\r\n                                isDateRangeEnd: vm.checkDateRangeEnd(helpCalendar.formatDate(date)),\r\n                                hideLeftAndRightDays: day.hideLeftAndRightDays,\r\n                                isToday: isToday,\r\n                                isMarked: isMarked\r\n                            });\r\n                        });\r\n\r\n                        week.days = finalizedDays;\r\n                    });\r\n                });\r\n\r\n            },\r\n            clickDay(item) {\r\n                if (!this.fConfigs.isDateRange && !this.fConfigs.isDatePicker && !this.fConfigs.isMultipleDatePicker) {\r\n                    return false;\r\n                }\r\n\r\n                // Disable days of week if set in configuration\r\n                let dateDay = helpCalendar.getDateFromFormat(item.date).getDay() - 1;\r\n                if (dateDay === -1) {\r\n                    dateDay = 6;\r\n                }\r\n\r\n                let dayOfWeekString = this.fConfigs.dayNames[dateDay];\r\n                if (this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\r\n                    return false;\r\n                }\r\n\r\n                // Disabled dates\r\n                if (this.fConfigs.disabledDates.includes(item.date)) {\r\n                    return false;\r\n                }\r\n\r\n                // Limits\r\n                if (this.fConfigs.limits) {\r\n                    let min = helpCalendar.getDateFromFormat(this.fConfigs.limits.min).getTime();\r\n                    let max = helpCalendar.getDateFromFormat(this.fConfigs.limits.max).getTime();\r\n                    let date = helpCalendar.getDateFromFormat(item.date).getTime();\r\n\r\n                    if (date < min || date > max) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // Date Range\r\n                if (this.fConfigs.isDateRange) {\r\n\r\n                    let clickDate = helpCalendar.getDateFromFormat(item.date).getTime();\r\n\r\n                    let startDate = false;\r\n                    if (this.calendar.dateRange.start.date) {\r\n                        startDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start.date).getTime();\r\n                    }\r\n\r\n                    // Two dates is not empty\r\n                    if (this.calendar.dateRange.start.date !== false && this.calendar.dateRange.end.date !== false) {\r\n                        this.calendar.dateRange.start.date = item.date;\r\n                        this.calendar.dateRange.end.date = false;\r\n                        // Not date selected\r\n                    } else if (this.calendar.dateRange.start.date === false && this.calendar.dateRange.end.date === false) {\r\n                        this.calendar.dateRange.start.date = item.date;\r\n                        // Start Date not empty, chose date > start date\r\n                    } else if (this.calendar.dateRange.end.date === false && (clickDate > startDate)) {\r\n                        this.calendar.dateRange.end.date = item.date;\r\n                        // Start date not empty, chose date <= start date (also same date range select)\r\n                    } else if (this.calendar.dateRange.start.date !== false && (clickDate <= startDate)) {\r\n                        this.calendar.dateRange.end.date = this.calendar.dateRange.start.date;\r\n                        this.calendar.dateRange.start.date = item.date;\r\n                    }\r\n\r\n\r\n                    //Get number of days between date range dates\r\n                    if (this.calendar.dateRange.start.date !== false && this.calendar.dateRange.end.date !== false) {\r\n                        let oneDay = 24 * 60 * 60 * 1000;\r\n                        let firstDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start.date);\r\n                        let secondDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.end.date);\r\n                        let diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));\r\n\r\n                        this.$emit('selectedDaysCount', diffDays);\r\n\r\n                        // Is Auto Closeable\r\n                        if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\r\n                            this.showCalendar = false;\r\n                        }\r\n                    }\r\n\r\n                    this.$emit('input', this.calendar);\r\n                } else if (this.fConfigs.isDatePicker) {\r\n                    this.calendar.selectedDate = item.date;\r\n                    this.$emit('input', this.calendar);\r\n\r\n                    // Is Auto Closeable\r\n                    if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\r\n                        this.showCalendar = false;\r\n                    }\r\n                } else if (this.fConfigs.isMultipleDatePicker) {\r\n                    if (this.calendar.selectedDates.find(date => date.date === item.date)) {\r\n                        let dateIndex = this.calendar.selectedDates.findIndex(date => date.date === item.date);\r\n                        this.calendar.selectedDates.splice(dateIndex, 1);\r\n                    } else {\r\n                        let date = Object.assign({}, this.defaultDateFormat);\r\n                        date.date = item.date;\r\n                        this.calendar.selectedDates.push(date);\r\n                    }\r\n\r\n                    this.$emit('input', this.calendar);\r\n                }\r\n\r\n                this.markChooseDays();\r\n\r\n                // Time Picker\r\n                if (this.fConfigs.withTimePicker) {\r\n                    if (this.fConfigs.isDateRange || this.fConfigs.isDatePicker) {\r\n                        this.openTimePicker();\r\n                    }\r\n\r\n                    if (this.calendar.selectedDates.find(date => date.date === item.date) && this.fConfigs.isMultipleDatePicker) {\r\n                        this.openTimePicker();\r\n                    }\r\n                }\r\n\r\n                this.$emit('choseDay', item);\r\n            },\r\n            markChooseDays() {\r\n                let vm = this;\r\n                let startDate = vm.calendar.dateRange.start.date;\r\n                let endDate = vm.calendar.dateRange.end.date;\r\n\r\n                this.listCalendars.forEach((calendar) => {\r\n                    calendar.weeks.forEach((week) => {\r\n                        week.days.forEach((day) => {\r\n\r\n                            day.isMarked = false;\r\n\r\n                            // Date Picker\r\n                            if (vm.fConfigs.isDatePicker) {\r\n                                if (this.calendar.selectedDate === day.date)\r\n                                    day.isMarked = true;\r\n                            } else if (vm.fConfigs.isMultipleDatePicker) {\r\n                                if (vm.calendar.selectedDates.find(date => date.date === day.date))\r\n                                    day.isMarked = true;\r\n                            } else {\r\n                                day.isMouseToLeft = false;\r\n                                day.isMouseToRight = false;\r\n\r\n                                // Date Range\r\n                                if (startDate === day.date) {\r\n                                    day.isMouseToLeft = !!endDate;\r\n                                    day.isMarked = true;\r\n                                }\r\n\r\n                                if (endDate === day.date) {\r\n                                    day.isMouseToRight = !!endDate;\r\n                                    day.isMarked = true;\r\n                                }\r\n\r\n                                if (startDate && startDate === endDate) {\r\n                                    day.isMouseToLeft = false\r\n                                    day.isMouseToRight = false\r\n                                }\r\n\r\n                                if (startDate && endDate) {\r\n                                    if (helpCalendar.getDateFromFormat(day.date).getTime() > helpCalendar.getDateFromFormat(startDate)\r\n                                        && helpCalendar.getDateFromFormat(day.date) < helpCalendar.getDateFromFormat(endDate)) {\r\n                                        day.isMarked = true;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (this.fConfigs.markedDates.includes(day.date))\r\n                                day.isMarked = true;\r\n                        })\r\n                    })\r\n                })\r\n            },\r\n            dayMouseOver(week_key, date) {\r\n                if (!this.fConfigs.isDateRange) {\r\n                    return false;\r\n                }\r\n\r\n                // Limits\r\n                if (this.fConfigs.limits) {\r\n                    let limitMin = helpCalendar.getDateFromFormat(this.fConfigs.limits.min).getTime();\r\n                    let limitMax = helpCalendar.getDateFromFormat(this.fConfigs.limits.max).getTime();\r\n                    let limitDate = helpCalendar.getDateFromFormat(date).getTime();\r\n\r\n                    if (limitDate < limitMin || limitDate > limitMax) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if ((this.calendar.dateRange.start.date === false || this.calendar.dateRange.end.date === false)\r\n                    && (this.calendar.dateRange.start.date !== false || this.calendar.dateRange.end.date !== false)) {\r\n\r\n                    for (let e = 0; e < this.listCalendars.length; e++) {\r\n                        let calendar = this.listCalendars[e];\r\n\r\n                        for (let f = 0; f < calendar.weeks.length; f++) {\r\n                            let week = calendar.weeks[f];\r\n\r\n                            for (let i = 0; i < week.days.length; i++) {\r\n\r\n                                let item = week.days[i];\r\n\r\n                                this.listCalendars[e].weeks[f].days[i].isHovered = false;\r\n\r\n                                if (item.date !== this.calendar.dateRange.start.date && !this.fConfigs.markedDates.includes(item.date)) {\r\n                                    this.listCalendars[e].weeks[f].days[i].isMarked = false;\r\n                                }\r\n\r\n                                if (this.calendar.dateRange.start.date) {\r\n                                    let itemDate = helpCalendar.getDateFromFormat(item.date).getTime();\r\n                                    let thisDate = helpCalendar.getDateFromFormat(date).getTime();\r\n                                    let startDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start.date).getTime();\r\n\r\n                                    this.listCalendars[e].weeks[f].days[i].isMouseToLeft = (itemDate === startDate && thisDate > startDate) || (itemDate === thisDate && thisDate < startDate);\r\n                                    this.listCalendars[e].weeks[f].days[i].isMouseToRight = (itemDate === startDate && thisDate < startDate) || (itemDate === thisDate && thisDate > startDate);\r\n\r\n                                    let dateDay = helpCalendar.getDateFromFormat(item.date).getDay() - 1;\r\n                                    if (dateDay === -1) {\r\n                                        dateDay = 6;\r\n                                    }\r\n\r\n                                    let dayOfWeekString = this.fConfigs.dayNames[dateDay];\r\n                                    if (!this.fConfigs.disabledDayNames.includes(dayOfWeekString) &&\r\n                                        ((itemDate > startDate && itemDate < thisDate)\r\n                                            ||\r\n                                            (itemDate < startDate && itemDate > thisDate))\r\n                                    ) {\r\n                                        this.listCalendars[e].weeks[f].days[i].isMarked = true;\r\n                                    }\r\n\r\n                                    if (!this.calendar.dateRange.end.date && itemDate === thisDate) {\r\n                                        this.listCalendars[e].weeks[f].days[i].isHovered = true;\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            PreMonth(calendarKey = null) {\r\n                if (!this.allowPreDate)\r\n                    return false;\r\n\r\n                this.transitionPrefix = 'right';\r\n\r\n                if (calendarKey !== null) {\r\n                    let currentCalendar = this.listCalendars[calendarKey];\r\n                    currentCalendar.date = new Date(currentCalendar.date.getFullYear(), currentCalendar.date.getMonth() - 1);\r\n                    currentCalendar.key -= 1;\r\n                    this.updateCalendar();\r\n                } else {\r\n                    this.calendarsKey -= 1;\r\n                    this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear(), this.calendar.currentDate.getMonth() - 1);\r\n                    this.initCalendar();\r\n                }\r\n\r\n                this.$emit('changedMonth', this.calendar.currentDate);\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            NextMonth(calendarKey = null) {\r\n                if (!this.allowNextDate)\r\n                    return false;\r\n\r\n                this.transitionPrefix = 'left';\r\n\r\n                if (calendarKey !== null) {\r\n                    let currentCalendar = this.listCalendars[calendarKey];\r\n                    currentCalendar.date = new Date(currentCalendar.date.getFullYear(), currentCalendar.date.getMonth() + 1);\r\n                    currentCalendar.key += 1;\r\n                    this.updateCalendar();\r\n                } else {\r\n                    this.calendarsKey += 1;\r\n                    this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear(), this.calendar.currentDate.getMonth() + 1);\r\n                    this.initCalendar();\r\n                }\r\n\r\n                this.$emit('changedMonth', this.calendar.currentDate);\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            PreYear(calendarKey = null) {\r\n                if (!this.allowPreDate)\r\n                    return false;\r\n\r\n                let step = this.showYearPicker ? this.fConfigs.changeYearStep : 1;\r\n\r\n                if (calendarKey !== null) {\r\n                    let currentCalendar = this.listCalendars[calendarKey];\r\n                    currentCalendar.date = new Date(currentCalendar.date.getFullYear() - step, currentCalendar.date.getMonth());\r\n                    this.updateCalendar();\r\n                    this.$emit('changedYear', currentCalendar.date);\r\n                } else {\r\n                    this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear() - step, this.calendar.currentDate.getMonth());\r\n                    this.initCalendar();\r\n                    this.$emit('changedYear', this.calendar.currentDate);\r\n                }\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            NextYear(calendarKey = null) {\r\n                if (!this.allowNextDate)\r\n                    return false;\r\n\r\n                let step = this.showYearPicker ? this.fConfigs.changeYearStep : 1;\r\n\r\n                if (calendarKey !== null) {\r\n                    let currentCalendar = this.listCalendars[calendarKey];\r\n                    currentCalendar.date = new Date(currentCalendar.date.getFullYear() + step, currentCalendar.date.getMonth());\r\n                    this.updateCalendar();\r\n                    this.$emit('changedYear', currentCalendar.date);\r\n                } else {\r\n                    this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear() + step, this.calendar.currentDate.getMonth());\r\n                    this.initCalendar();\r\n                    this.$emit('changedYear', this.calendar.currentDate);\r\n                }\r\n            },\r\n            ChooseDate(date) {\r\n                let newDate = helpCalendar.getDateFromFormat(date);\r\n\r\n                if (date === 'today') {\r\n                    newDate = new Date();\r\n                }\r\n\r\n                this.calendar.currentDate = newDate;\r\n                this.initCalendar();\r\n            },\r\n            openMonthPicker(key) {\r\n                if (this.fConfigs.changeMonthFunction) {\r\n                    this.showMonthPicker = (key === this.showMonthPicker) ? false : key;\r\n                    this.showYearPicker = false;\r\n                }\r\n            },\r\n            openYearPicker(key) {\r\n                if (this.fConfigs.changeYearFunction) {\r\n                    this.showYearPicker = (key === this.showYearPicker) ? false : key;\r\n                    this.showMonthPicker = false;\r\n                }\r\n            },\r\n            openTimePicker() {\r\n                this.showTimePicker = true;\r\n            },\r\n            pickMonth(calendarKey = null, key) {\r\n                this.showMonthPicker = false;\r\n\r\n                if (calendarKey !== null) {\r\n                    let currentCalendar = this.listCalendars[calendarKey];\r\n                    let date = currentCalendar.date;\r\n                    currentCalendar.date = new Date(date.getFullYear(), key + 1, 0);\r\n                    this.updateCalendar();\r\n                } else {\r\n                    let date = this.calendar.currentDate;\r\n                    this.calendar.currentDate = new Date(date.getFullYear(), key + 1, 0);\r\n                    this.initCalendar();\r\n                }\r\n\r\n            },\r\n            pickYear(calendarKey = null, year) {\r\n                this.showYearPicker = false;\r\n\r\n                if (calendarKey !== null) {\r\n                    let currentCalendar = this.listCalendars[calendarKey];\r\n                    let date = currentCalendar.date;\r\n                    currentCalendar.date = new Date(year, date.getMonth() + 1, 0);\r\n                    this.updateCalendar();\r\n                } else {\r\n                    let date = this.calendar.currentDate;\r\n                    this.calendar.currentDate = new Date(year, date.getMonth() + 1, 0);\r\n                    this.initCalendar();\r\n                }\r\n            },\r\n            getClassNames(day) {\r\n                let classes = [];\r\n\r\n                // Disable days of week if set in configuration\r\n                let dateDay = helpCalendar.getDateFromFormat(day.date).getDay() - 1;\r\n                if (dateDay === -1) {\r\n                    dateDay = 6;\r\n                }\r\n                let dayOfWeekString = this.fConfigs.dayNames[dateDay];\r\n                if (this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\r\n                    day.hide = true;\r\n                    classes.push('vfc-cursor-not-allowed');\r\n                }\r\n\r\n                let date = helpCalendar.getDateFromFormat(day.date);\r\n                let today = new Date();\r\n                today.setHours(0, 0, 0, 0);\r\n\r\n\r\n                // Disabled dates\r\n                if (this.fConfigs.disabledDates.includes(day.date) ||\r\n                    (this.fConfigs.disabledDates.includes('beforeToday') && date.getTime() < today.getTime()) ||\r\n                    (this.fConfigs.disabledDates.includes('afterToday') && date.getTime() > today.getTime())\r\n                ) {\r\n                    classes.push('vfc-disabled');\r\n                    classes.push('vfc-cursor-not-allowed');\r\n                }\r\n\r\n                if (this.fConfigs.limits) {\r\n                    let min = helpCalendar.getDateFromFormat(this.fConfigs.limits.min).getTime();\r\n                    let max = helpCalendar.getDateFromFormat(this.fConfigs.limits.max).getTime();\r\n\r\n                    if (date.getTime() < min || date.getTime() > max) {\r\n                        classes.push('vfc-disabled');\r\n                        classes.push('vfc-cursor-not-allowed');\r\n                    }\r\n                }\r\n\r\n                if (day.hide) {\r\n                    classes.push('vfc-hide');\r\n                }\r\n\r\n                // Today date\r\n                if (day.isToday) {\r\n                    classes.push('vfc-today');\r\n                }\r\n\r\n                if (!day.hideLeftAndRightDays && !this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\r\n\r\n                    // Mark Date\r\n                    if (day.isMarked) {\r\n                        classes.push('vfc-marked');\r\n                    } else if (day.isHovered) {\r\n                        classes.push('vfc-hovered');\r\n                    }\r\n\r\n                    if (this.fConfigs.markedDates.includes(day.date)) {\r\n                        classes.push('vfc-borderd');\r\n                    }\r\n\r\n                    // Date Range Marked\r\n                    if (this.fConfigs.markedDateRange.start && this.fConfigs.markedDateRange.end) {\r\n                        if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.start) <= helpCalendar.getDateFromFormat(day.date)\r\n                            && helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.end) >= helpCalendar.getDateFromFormat(day.date)) {\r\n                            classes.push('vfc-marked');\r\n                        }\r\n\r\n                        if (day.date === this.fConfigs.markedDateRange.start) {\r\n                            classes.push('vfc-start-marked');\r\n                        } else if (day.date === this.fConfigs.markedDateRange.end) {\r\n                            classes.push('vfc-end-marked');\r\n                        }\r\n                    } else {\r\n\r\n                        // Only After Start Marked\r\n                        if (this.fConfigs.markedDateRange.start) {\r\n                            if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.start) <= helpCalendar.getDateFromFormat(day.date))\r\n                                classes.push('vfc-marked');\r\n                        }\r\n\r\n                        // Only Before End Marked\r\n                        if (this.fConfigs.markedDateRange.end) {\r\n                            if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.end) >= helpCalendar.getDateFromFormat(day.date))\r\n                                classes.push('vfc-marked');\r\n                        }\r\n                    }\r\n\r\n                    classes.push('vfc-hover');\r\n                }\r\n\r\n\r\n                // Date Mark With Custom Classes\r\n                if (typeof this.fConfigs.markedDates === \"object\") {\r\n                    let checkMarked = this.fConfigs.markedDates.find(function (markDate) {\r\n                        return markDate.date === day.date;\r\n                    });\r\n\r\n                    if (typeof checkMarked !== \"undefined\") {\r\n                        classes.push(checkMarked.class);\r\n                    }\r\n                }\r\n\r\n                if (day.date === this.calendar.dateRange.start.date) {\r\n                    classes.push('vfc-start-marked');\r\n                }\r\n\r\n                if (day.date === this.calendar.dateRange.end.date) {\r\n                    classes.push('vfc-end-marked');\r\n                }\r\n\r\n                if (day.date === this.calendar.selectedDate || this.calendar.selectedDates.find(date => date.date === day.date)) {\r\n                    classes.push('vfc-borderd')\r\n                }\r\n\r\n                return classes;\r\n            },\r\n            checkDateRangeStart(date) {\r\n                return date === this.fConfigs.markedDateRange.start;\r\n            },\r\n            checkDateRangeEnd(date) {\r\n                return date === this.fConfigs.markedDateRange.end;\r\n            },\r\n            checkLimits(value) {\r\n                if (this.fConfigs.limits) {\r\n                    let min = new Date(helpCalendar.getDateFromFormat(this.fConfigs.limits.min));\r\n                    min.setDate(1);\r\n                    min.setHours(0, 0, 0, 0);\r\n                    let max = new Date(helpCalendar.getDateFromFormat(this.fConfigs.limits.max));\r\n                    max.setDate(1);\r\n                    max.setHours(0, 0, 0, 0);\r\n\r\n                    this.allowPreDate = true;\r\n                    this.allowNextDate = true;\r\n\r\n                    let current = new Date(value);\r\n                    current.setDate(1);\r\n                    current.setHours(0, 0, 0, 0);\r\n\r\n                    if (current <= min) {\r\n                        this.allowPreDate = false;\r\n                    }\r\n\r\n                    if (current >= max) {\r\n                        this.allowNextDate = false;\r\n                    }\r\n                }\r\n            },\r\n            getTransition_() {\r\n                if (!this.fConfigs.transition)\r\n                    return '';\r\n\r\n                let name = '';\r\n                if (this.transitionPrefix === 'left') {\r\n                    name = 'vfc-calendar-slide-left';\r\n                } else if (this.transitionPrefix === 'right') {\r\n                    name = 'vfc-calendar-slide-right';\r\n                }\r\n                return name;\r\n            },\r\n            setCalendarStyles() {\r\n                let day = this.$refs.day[0];\r\n                let container = this.$refs.mainContainer;\r\n\r\n                container.style.display = \"\";\r\n                let height = container.clientHeight + (day.clientHeight + (day.clientHeight / 2.5));\r\n                container.style.height = height + \"px\";\r\n\r\n                if (this.fConfigs.isModal) {\r\n                    container.style.display = \"none\"\r\n                }\r\n            },\r\n            checkHiddenElement(elementName) {\r\n                return !this.fConfigs.hiddenElements.includes(elementName);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    .vfc-styles-conditional-class {\r\n        @import \"../assets/scss/calendar.scss\";\r\n    }\r\n</style>\r\n"]}]}